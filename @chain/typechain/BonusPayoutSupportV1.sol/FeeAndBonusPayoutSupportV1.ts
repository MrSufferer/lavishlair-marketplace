/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface FeeAndBonusPayoutSupportV1Interface extends utils.Interface {
  functions: {
    "_handleMarketGovernancePayout(address,uint256,address,uint256,address)": FunctionFragment;
    "_handleRoyaltyEnginePayout(address,uint256,uint256,address)": FunctionFragment;
    "registrar()": FunctionFragment;
    "setGovernanceAddress(address)": FunctionFragment;
    "setRoyaltyEngineAddress(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_handleMarketGovernancePayout"
      | "_handleRoyaltyEnginePayout"
      | "registrar"
      | "setGovernanceAddress"
      | "setRoyaltyEngineAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_handleMarketGovernancePayout",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_handleRoyaltyEnginePayout",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "registrar", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setGovernanceAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoyaltyEngineAddress",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "_handleMarketGovernancePayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_handleRoyaltyEnginePayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registrar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGovernanceAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoyaltyEngineAddress",
    data: BytesLike
  ): Result;

  events: {
    "BonusPayout(address,uint256,address,uint256)": EventFragment;
    "RoyaltyPayout(address,uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BonusPayout"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoyaltyPayout"): EventFragment;
}

export interface BonusPayoutEventObject {
  tokenContract: string;
  tokenId: BigNumber;
  recipient: string;
  amount: BigNumber;
}
export type BonusPayoutEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  BonusPayoutEventObject
>;

export type BonusPayoutEventFilter = TypedEventFilter<BonusPayoutEvent>;

export interface RoyaltyPayoutEventObject {
  tokenContract: string;
  tokenId: BigNumber;
  recipient: string;
  amount: BigNumber;
}
export type RoyaltyPayoutEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  RoyaltyPayoutEventObject
>;

export type RoyaltyPayoutEventFilter = TypedEventFilter<RoyaltyPayoutEvent>;

export interface FeeAndBonusPayoutSupportV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FeeAndBonusPayoutSupportV1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _handleMarketGovernancePayout(
      _tokenContract: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _buyer: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _payoutCurrency: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _handleRoyaltyEnginePayout(
      _tokenContract: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _payoutCurrency: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registrar(overrides?: CallOverrides): Promise<[string]>;

    setGovernanceAddress(
      _daoGovernance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRoyaltyEngineAddress(
      _royaltyEngine: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  _handleMarketGovernancePayout(
    _tokenContract: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _buyer: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _payoutCurrency: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _handleRoyaltyEnginePayout(
    _tokenContract: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    _payoutCurrency: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registrar(overrides?: CallOverrides): Promise<string>;

  setGovernanceAddress(
    _daoGovernance: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRoyaltyEngineAddress(
    _royaltyEngine: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _handleMarketGovernancePayout(
      _tokenContract: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _buyer: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _payoutCurrency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _handleRoyaltyEnginePayout(
      _tokenContract: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _payoutCurrency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registrar(overrides?: CallOverrides): Promise<string>;

    setGovernanceAddress(
      _daoGovernance: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRoyaltyEngineAddress(
      _royaltyEngine: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BonusPayout(address,uint256,address,uint256)"(
      tokenContract?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      recipient?: null,
      amount?: null
    ): BonusPayoutEventFilter;
    BonusPayout(
      tokenContract?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      recipient?: null,
      amount?: null
    ): BonusPayoutEventFilter;

    "RoyaltyPayout(address,uint256,address,uint256)"(
      tokenContract?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      recipient?: null,
      amount?: null
    ): RoyaltyPayoutEventFilter;
    RoyaltyPayout(
      tokenContract?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      recipient?: null,
      amount?: null
    ): RoyaltyPayoutEventFilter;
  };

  estimateGas: {
    _handleMarketGovernancePayout(
      _tokenContract: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _buyer: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _payoutCurrency: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _handleRoyaltyEnginePayout(
      _tokenContract: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _payoutCurrency: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registrar(overrides?: CallOverrides): Promise<BigNumber>;

    setGovernanceAddress(
      _daoGovernance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRoyaltyEngineAddress(
      _royaltyEngine: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _handleMarketGovernancePayout(
      _tokenContract: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _buyer: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _payoutCurrency: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _handleRoyaltyEnginePayout(
      _tokenContract: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _payoutCurrency: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registrar(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setGovernanceAddress(
      _daoGovernance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRoyaltyEngineAddress(
      _royaltyEngine: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
